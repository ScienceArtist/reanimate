{"version":3,"sources":["Presets.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Presets","name","programs","code","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connect","ws","WebSocket","onopen","event","setState","state","objectSpread","message","send","program","onclose","setTimeout","onmessage","data","console","log","nFrames_new","svgs_new","nFrames","svgs","start","Date","now","startsWith","substring","concat","div","document","createElement","innerHTML","push","socket","onLoad","ace","resize","onChange","text","timeout","clearTimeout","self","assertThisInitialized","selectPreset","evt","target","value","preset","requestAnimationFrame","animate","thisFrame","Math","round","svg","firstChild","removeChild","appendChild","innerText","_this2","_this$state","react_default","a","className","map","group","i","key","label","elt","href","lib_default","mode","width","height","theme","fontSize","focus","editorProps","$blockScrolling","ref","node","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf9b0be1.chunk.js","sourcesContent":["const latex_draw =\n`animation :: Animation\nanimation =\n    bg \\`sim\\` (autoReverse $ drawText \\`andThen\\` fillText)\n  where\n    bg = mkAnimation 0 $ emit (mkBackground \"black\")\n    msg = \"\\\\\\\\sum_{k=1}^\\\\\\\\infty {1 \\\\\\\\over k^2} = {\\\\\\\\pi^2 \\\\\\\\over 6}\"\n    glyphs = center $ latexAlign msg\n    fillText = mkAnimation 1 $ do\n      s <- signal 0 1\n      emit $ scale 5 $ withFillColor \"white\" $ withFillOpacity s glyphs\n    drawText = mkAnimation 2 $ do\n      s <- signal 0 1\n      emit $ scale 5 $\n        withStrokeColor \"white\" $ withFillOpacity 0 $ withStrokeWidth (Num 0.1) $\n          partialSvg s glyphs`;\n\nconst bbox =\n`animation :: Animation\nanimation = bg \\`sim\\`\n    mapA (translate (-50) 0) bbox1 \\`sim\\`\n    mapA (translate 50 0) bbox2\n  where\n    bg = mkAnimation 0 $ emit $ mkBackground \"black\"\n\nbbox1 :: Animation\nbbox1 = mkAnimation 5 $ do\n    s <- signal 0 1\n    emit $ mkGroup\n      [ mkBoundingBox $ rotate (360*s) svg\n      , withFillColor \"white\" $ rotate (360*s) svg ]\n  where\n    svg = scale 3 $ center $ latexAlign \"\\\\\\\\sum_{k=1}^\\\\\\\\infty\"\n\nbbox2 :: Animation\nbbox2 = autoReverse $ mkAnimation 2.5 $ do\n  s <- signal 0 1\n  emit $ mkGroup\n    [ mkBoundingBox $ partialSvg s heartShape\n    , withStrokeColor \"white\" $ withFillOpacity 0 $ partialSvg s heartShape ]\n\nmkBoundingBox :: Tree -> Tree\nmkBoundingBox svg = withStrokeColor \"red\" $ withFillOpacity 0 $\n    mkRect (S.Num x, S.Num y) (S.Num w) (S.Num h)\n  where\n    (x, y, w, h) = boundingBox svg\n\nheartShape =\n    center $ rotateAroundCenter 225 $ mkPathString\n      \"M0.0,40.0 v-40.0 h40.0\\\\\n      \\\\a20.0 20.0 90.0 0 1 0.0,40.0\\\\\n      \\\\a20.0 20.0 90.0 0 1 -40.0,0.0 Z\"`;\n\nconst sinewave =\n`animation :: Ani ()\nanimation = proc () -> do\n    duration 10 -< ()\n    emit -< toHtml $ mkBackground \"black\"\n    idx <- signalOscillate 0 1 -< ()\n    emit -< do\n      defs_ $ clipPath_ [id_ \"clip\"] $ toHtml $\n        mkRect (Num 0, Num (-height)) (Num $ idx*width) (Num 320)\n      toHtml $ translate margin height $ withStrokeColor \"white\" $\n        withClipPathRef (Ref \"clip\") $ mkPathText $ renderPathText $ approxFnData 100 wave\n      toHtml $ withStrokeColor \"white\" $\n        mkLine (Num margin, Num 10) (Num margin, Num 170)\n      toHtml $ withStrokeColor \"white\" $\n        mkLine (Num margin, Num height) (Num (margin+width), Num height)\n    let (circX, circY) = wave idx\n    emit -< g_ [transform_ $ Lucid.translate margin height] $\n      circle_ [num_ cx_ circX, num_ cy_ circY, r_ \"3\", fill_ \"red\"]\n  where\n    freq = 3; margin = 30; width = 260; height = 90\n    wave idx = (idx*width, sin (idx*pi*2*freq) * 50)`;\n\nconst morph_wave =\n`animation :: Animation\nanimation = autoReverse $ mkAnimation 2.5 $ do\n    morph <- signal 0 1\n    emit $ mkBackground \"black\"\n    emit $ withStrokeColor \"white\" $ translate (-320/2) (-180/2) $ mkGroup\n      [ translate 30 50  $ mkLinePath wave1\n      , translate 30 130 $ mkLinePath wave2\n      , translate 30 90  $ mkLinePath $ morphPath wave1 wave2 morph\n      , mkLine (Num 30, Num 10) (Num 30, Num 170)\n      , mkLine (Num 30, Num 90) (Num 290, Num 90) ]\n  where\n    freq = 3; width = 260\n    wave1 = approxFnData 100 $ \\\\idx -> (idx*width, sin (idx*pi*2*freq) * 20)\n    wave2 = approxFnData 100 $ \\\\idx -> (idx*width, sin (idx*pi*2*(freq*3)) * 20)`;\n\nconst morph_wave_circle =\n`animation :: Animation\nanimation = autoReverse $ mkAnimation 2.5 $ do\n    idx <- signal 0 1\n    emit $ mkBackground \"black\"\n    emit $ withStrokeColor \"white\" $ translate (-320/2) (-180/2) $ mkGroup\n      [ translate 30 90 $ mkLinePath $ morphPath circle wave1 idx\n      , mkLine (Num 30, Num 10) (Num 30, Num 170)\n      , mkLine (Num 30, Num 90) (Num 290, Num 90) ]\n  where\n    freq = 5; width = 260; radius = 50\n    wave1 = approxFnData 100 $ \\\\idx -> (idx*width, sin (idx*pi*2*freq) * 20)\n    circle = approxFnData 100 $ \\\\idx ->\n      (cos (idx*pi*2+pi/2)*radius + width/2, sin (idx*pi*2+pi/2)*radius)`;\n\nconst progressMeters =\n`animation :: Animation\nanimation =\n    bg \\`sim\\` labels \\`sim\\`\n    mapA (translate (-100) 0)  (adjustSpeed 1.0 progressMeter) \\`simLoop\\`\n    mapA (translate 0 0) (adjustSpeed 2.0 progressMeter) \\`simLoop\\`\n    mapA (translate 100 0) (adjustSpeed 0.5 progressMeter)\n  where\n    bg = mkAnimation 0 $ emit $ mkBackground \"black\"\n    labels = mkAnimation 0 $ emit $ translate 0 70 $ withFillColor \"white\" $ mkGroup\n      [ translate (-100) 0 $ scale 2 $ center $ latex \"1x\"\n      , translate 0 0      $ scale 2 $ center $ latex \"2x\"\n      , translate 100 0    $ scale 2 $ center $ latex \"0.5x\"\n      ]\n\nprogressMeter :: Animation\nprogressMeter = mkAnimation 3 $ do\n  h <- signal 0 100\n  emit $ center $ mkGroup\n    [ withStrokeColor \"white\" $ withStrokeWidth (Num 2) $ withFillOpacity 0 $\n        mkRect (Num 0, Num 0) (Num 30) (Num 100)\n    , withFillColor \"white\" $\n        mkRect (Num 0, Num 0) (Num 30) (Num h) ]`\n\nconst latex_basic =\n`animation :: Animation\nanimation = autoReverse $ mkAnimation 2 $ do\n    s <- signal 0 1\n    emit $ mkGroup\n      [ mkBackground \"black\"\n      , withStrokeColor \"white\" $ withFillOpacity 0 $ withStrokeWidth (Num 0.1) text\n      , withFillColor \"white\" $ withFillOpacity s text ]\n  where\n    text = scale 4 $ center $ latexAlign\n      \"\\\\\\\\sum_{k=1}^\\\\\\\\infty {1 \\\\\\\\over k^2} = {\\\\\\\\pi^2 \\\\\\\\over 6}\"`\n\nconst latex_color =\n`animation :: Animation\nanimation = mkAnimation 1 $ do\n    emit $ mkBackground \"black\"\n    emit $ withStrokeWidth (Num 0.2) $\n      withStrokeColor \"white\" $\n      withSubglyphs [0] (withFillColor \"blue\") $\n      withSubglyphs [1] (withFillColor \"yellow\") $\n      withSubglyphs [2] (withFillColor \"green\") $\n      withSubglyphs [3] (withFillColor \"red\") $\n      withSubglyphs [4] (withFillColor \"darkslategrey\") $\n      svg\n  where\n    svg = scale 10 $ center $ latex \"\\\\\\\\LaTeX\"`\n\n\nexport default [\n  { name: \"Examples\"\n  , programs:\n    [ {name: \"LaTeX Draw\", code: latex_draw }\n    , {name: \"LaTeX Color\", code: latex_color }\n    , {name: \"LaTeX Basic\", code: latex_basic }\n    , {name: \"Bounding boxes\", code: bbox }\n    // , {name: \"Sinewave\", code: sinewave }\n    , {name: \"Morphwave\", code: morph_wave }\n    , {name: \"Morphwave Circle\", code: morph_wave_circle }\n    , {name: \"Progress meters\", code: progressMeters }\n    // , {name: \"Highlight\", code: highlight }\n    ]\n  },\n];\n","import React, {Component} from 'react';\nimport './App.css';\nimport AceEditor from 'react-ace';\nimport 'brace/mode/haskell';\nimport 'brace/theme/github';\nimport 'brace/theme/monokai';\n\nimport preset from './Presets';\n\nclass App extends Component {\n  connect = () => {\n    const ws = new WebSocket(\"wss://reanimate.clozecards.com:9160\");\n    // const ws = new WebSocket(\"ws://localhost:9161\");\n\n    ws.onopen = event => {\n      this.setState(state => ({\n        ...state,\n        message: \"Connected.\"\n      }));\n      ws.send(this.state.program);\n    }\n    ws.onclose = event => {\n      this.setState(state => ({\n        ...state,\n        message: \"Disconnected.\"\n      }));\n      setTimeout(this.connect, 1000);\n    }\n    ws.onmessage = event => {\n      if (event.data === \"Success!\") {\n        console.log(\"Success\");\n      } else if (event.data === \"Rendering\") {\n        this.setState({message: \"Rendering...\"});\n        this.nFrames_new = 0;\n        this.svgs_new = [];\n      } else if (event.data === \"Done\") {\n        this.setState({message: \"Success!\"});\n        console.log(\"Done\");\n        this.nFrames = this.nFrames_new;\n        this.svgs = this.svgs_new;\n        this.nFrames_new = 0;\n        this.svgs_new = [];\n        this.start = Date.now();\n      } else if (event.data.startsWith(\"Error\")) {\n        console.log(\"Error\");\n        this.setState({message: event.data.substring(5)});\n      } else {\n        this.setState({message: `Rendering: ${this.nFrames_new}`});\n        this.nFrames_new++;\n        const div = document.createElement('div');\n        div.innerHTML = event.data;\n        this.svgs_new.push(div);\n      }\n    }\n    this.setState(state => ({\n      ...state,\n      socket: ws,\n      message: \"Connecting...\"\n    }));\n  }\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      program: preset[0].programs[0].code\n    };\n    setTimeout(this.connect, 0);\n    this.nFrames_new = 0;\n    this.svgs_new = [];\n    this.nFrames = 0;\n    this.svgs = [];\n    this.start = Date.now();\n    const self = this;\n    const animate = () => {\n      const now = Date.now();\n      const nFrames = self.nFrames;\n      const thisFrame = (Math.round((now - this.start) / 1000 * 60)) % nFrames\n      // const thisFrame = 0; console.log('Animation frame:', thisFrame, nFrames);\n      if (nFrames) {\n        // self.svg.innerHTML = self.svgs[thisFrame];\n        while (self.svg.firstChild)\n          self.svg.removeChild(self.svg.firstChild);\n        self.svg.appendChild(self.svgs[thisFrame]);\n      } else {\n        self.svg.innerText = \"Loading...\";\n      }\n      requestAnimationFrame(animate);\n    };\n    requestAnimationFrame(animate);\n  }\n  onLoad = ace => {\n    setTimeout(function() {\n      ace.resize();\n    }, 0);\n  }\n  onChange = text => {\n    this.setState({program: text});\n    if (this.timeout)\n      clearTimeout(this.timeout);\n    const socket = this.state.socket\n    const self = this;\n\n    this.timeout = setTimeout(function() {\n      console.log('change', text);\n      self.setState(state => ({\n        ...state,\n        message: \"Compiling...\"\n      }));\n      socket.send(text);\n    }, 500);\n  };\n  selectPreset = evt => {\n    this.onChange(evt.target.value);\n  };\n  render() {\n    const {message, program} = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          <select onChange={this.selectPreset}>\n            {\n              preset.map(\n                (group, i) => <optgroup key={i} label={group.name}>\n                  {group.programs.map((elt, i) => <option value={elt.code} key={i}>{elt.name}</option>)}\n                </optgroup>\n              )\n            }\n          </select>\n          <a className=\"home\" href=\"https://github.com/Lemmih/reanimate\">Return to GitHub page.</a>\n        </div>\n        <div className=\"editor\">\n          <AceEditor\n            mode=\"haskell\"\n            width=\"100%\"\n            height=\"100%\"\n            theme=\"monokai\"\n            fontSize={16}\n            name=\"UNIQUE_ID_OF_DIV\"\n            value={program}\n            onLoad={this.onLoad}\n            onChange={this.onChange}\n            focus={true}\n            editorProps={{\n              $blockScrolling: true\n            }}/>\n        </div>\n        <div className=\"controls\"></div>\n        <div className=\"viewer\">\n          <div ref={node => this.svg = node}/>\n          <div className=\"messages\">\n            <pre>{message}</pre>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}